/*
 * MatrixOps.c
 *
 *  Created on: Aug 9, 2016
 *      Author: robertirwin
 */

#include 	"MatrixOps.h"


/* Name: 		MyMatInit
 * Description: Initializes the structure MyMat. Takes a pointer to the MyMat
 * 				structure, the number of desired rows, the number of desired columns,
 * 				a void pointer to the array containing all elements of the desired matrix,
 * 				and the type of the elements in the matrix. The type of the elements
 * 				must be defined according to the types in the MyMatType enum.
 * 	***NOTE***: The elements array must adhere to the following format.
 * 	--       --
 * 	| a b c d | ------\       [a, b, c, d, e, f, g, h]
 * 	| e f g h | ------/
 * 	--       --
 */
void MyMatInit(MyMat * mat, uint16_t rows, uint16_t cols, void * elements, MyMatType type)
{
	mat->numrows = rows;
	mat->numcols = cols;
	// local variables

	switch(type){
	case TYPE_INT:
		// allocate memory and fill the matrix
		//
		mat->matrix = malloc(rows * cols * sizeof(int));
		memmove(mat->matrix, elements, rows * cols * sizeof(int));

		// allocate memory for the pointer to pointers
		//
		*(mat->rows) = malloc(rows);

		// assign the row pointers to the proper place in the matrix
		//
		for (int i = 0; i < rows; i = i++)
		{
			*(mat->rows[i]) = (int *) (mat->matrix + (i * cols));
		}
		break;
	}
}

/* Name: 		displayMatrix
 * Description: Prints the matrix defined in the MyMat structure to stdout.
 */
void displayMatrix(MyMat * mat)
{
	for (int i = 0; i < mat->numrows; i++)
	{
		for (int j = 0; j < mat->numcols; j++)
		{
			printf("%d ", *(mat->rows[i] + j));
		}
		j = 0;
		printf("\n");
	}
}
